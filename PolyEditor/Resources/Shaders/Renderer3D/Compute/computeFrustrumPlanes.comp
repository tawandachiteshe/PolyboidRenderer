#version 450 core

//gl_NumWorkGroups;
//gl_WorkGroupID;
//gl_LocalInvocationID;
//gl_GlobalInvocationID;
//gl_LocalInvocationIndex;
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct Plane
{
	vec3 Normal;
	float distanceFromOrigin;
};

struct Frustum
{
	Plane planes[4]; // left, right, top, bottom frustum planes.
};



Plane ComputePlane(vec3 point0, vec3 point1, vec3 point2)
{
	
	Plane plane;
	vec3 vertex0 = point1 - point0;
	vec3 vertex1 = point2 - point0;

	plane.Normal = normalize(cross(vertex0, vertex1));
	plane.distanceFromOrigin = dot(plane.Normal, point0);

	return plane;

}


#define BLOCK_SIZE 16

layout(std140, binding = 0) uniform CameraScreenData 
{
    uniform mat4 uInverseProjection;
    uniform vec2 uScreenDimensions;
};


vec4 ClipToView( vec4 clip )
{
    // View space position.
    vec4 view = uInverseProjection * clip;
    // Perspective projection.
    view = view / view.w;
    return view;
}


// Convert screen space coordinates to view space.
vec4 ScreenToView( vec4 screen )
{
    // Convert to normalized texture coordinates
    vec2 texCoord = screen.xy / uScreenDimensions;
    // Convert to clip space
    vec4 clip = vec4( vec2( texCoord.x, 1.0 - texCoord.y ) * 2.0f - 1.0f, screen.z,
    screen.w );
    return ClipToView( clip );
}

layout(std430, binding = 0) buffer Frustums {
  Frustum out_Frustums[];
};


void main()
{

    const ivec2 numThreads = ivec2(1280 / BLOCK_SIZE, 720 / BLOCK_SIZE); 

	 // View space eye position is always at the origin.
    const vec3 eyePos = vec3( 0, 0, 0 );
 
    // Compute the 4 corner points on the far clipping plane to use as the 
    // frustum vertices.
    vec4 screenSpace[4];
    // Top left point
    screenSpace[0] = vec4( (gl_GlobalInvocationID.xy) * BLOCK_SIZE, -1.0f, 1.0f );
    // Top right point
    screenSpace[1] = vec4( vec2( gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y ) * BLOCK_SIZE, -1.0f, 1.0f );
    // Bottom left point
    screenSpace[2] = vec4( vec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y + 1 ) * BLOCK_SIZE, -1.0f, 1.0f );
    // Bottom right point
    screenSpace[3] = vec4( vec2( gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y + 1 ) * BLOCK_SIZE, -1.0f, 1.0f );

    vec3 viewSpace[4];
    // Now convert the screen space points to view space
    for ( int i = 0; i < 4; i++ )
    {
        viewSpace[i] = ScreenToView( screenSpace[i] ).xyz;
    }

        // Now build the frustum planes from the view space points
    Frustum frustum;
 
    // Left plane
    frustum.planes[0] = ComputePlane( eyePos, viewSpace[2], viewSpace[0] );
    // Right plane
    frustum.planes[1] = ComputePlane( eyePos, viewSpace[1], viewSpace[3] );
   // Bottom plane
    frustum.planes[2] = ComputePlane( eyePos, viewSpace[0], viewSpace[1] );
    // Top plane
    frustum.planes[3] = ComputePlane( eyePos, viewSpace[3], viewSpace[2] );
  
   

 
    if ( gl_GlobalInvocationID.x < numThreads.x && gl_GlobalInvocationID.y < numThreads.y )
    {
        uint index = gl_GlobalInvocationID.x + ( gl_GlobalInvocationID.y * numThreads.x );
        out_Frustums[index] = frustum;
    }


}